{"version":3,"sources":["Components/searchField/searchField.js","Components/Navbar/Navbar.js","Pages/viewMoviePage/MoviePage.js","Pages/SearchPage/SearchPage.js","Components/Loader/Loader.js","Components/MovieCard/MovieCard.js","Components/MovieGrid/MovieGrid.js","Components/PageNumbers/PageNumbers.js","Components/Pagination/Pagination.js","Pages/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["SearchField","useState","search","setSearch","className","type","onChange","event","target","value","console","log","to","Navbar","MoviePage","SearchPage","Loader","active","MovieCard","movie","loading","id","name","src","image","medium","alt","genres","map","genre","i","key","MovieGrid","movies","PageNumbers","pageNumbers","handleClick","number","onClick","Pagination","data","moviesPerPage","Math","ceil","length","push","Home","currentData","App","setData","setLoading","currentPage","setCurrentPage","setErr","Number","window","scrollTo","useEffect","fetch","then","response","json","catch","error","indexOfLastMovie","indexOfFirstMovie","slice","path","exact","render","props","component","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.06ad4304.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './searchField.css'\r\n\r\nfunction SearchField() {\r\n  const [search, setSearch] = useState('');\r\n  function setSearchText(event) {\r\n    setSearch(event.target.value);\r\n    console.log(event.target.value);\r\n  }\r\n  return (\r\n    <div>\r\n      <input className=\"search-input\" type='text' onChange={setSearchText} />\r\n      <button className=\"search-btn\" type=\"submit\">\r\n        <Link className=\"search-link\" to={`/search/${search}`}>Search</Link>\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchField;","import React from 'react';\r\nimport SearchField from '../searchField/searchField';\r\nimport { Link } from 'react-router-dom';\r\nimport './Navbar.css';\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <div className=\"nav-brand\">\r\n        <Link to=\"/\" className=\"nav-link\">\r\n          <h2><span>I4</span>Movies</h2>\r\n        </Link>\r\n      </div>\r\n      <ul className=\"navbar-list\">\r\n        <Link to=\"/\" className=\"nav-link\">\r\n          <li className=\"navbar-list-item\">Home</li>\r\n        </Link>\r\n        <li className=\"navbar-list-item\">About</li>\r\n        <form>\r\n          <SearchField />\r\n        </form>\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\nexport default Navbar;","import React from 'react';\r\n\r\nfunction MoviePage() {\r\n\r\n  return <h1>Movie Page</h1>\r\n}\r\nexport default MoviePage;","import React from 'react';\r\n\r\nfunction SearchPage() {\r\nreturn <h1>Crazy Search</h1>\r\n}\r\nexport default SearchPage;","import React from \"react\";\r\nimport { Skeleton} from \"antd\";\r\n\r\nconst Loader = () => {\r\n  return <Skeleton active />;\r\n};\r\nexport default Loader;\r\n","import React from 'react';\r\nimport './MovieCard.css';\r\nimport { Link } from \"react-router-dom\";\r\nimport Skeleton from '../Loader/Loader';\r\n\r\nfunction MovieCard({movie,loading}) {\r\n  return (\r\n     <Link to={`/moviepage/${movie.id}/${movie.name}`} className=\"movie-link\">\r\n    <div className=\"card\">\r\n      <div className=\"card-image\">\r\n      { loading ? <Skeleton /> :\r\n        <img src={movie.image.medium} alt={movie.name}/>\r\n      }\r\n      </div>\r\n      <div className=\"card-content\">\r\n        <div className=\"name\">\r\n          <h3>{movie.name}</h3>\r\n        </div>\r\n        <div>\r\n          {movie.genres.map((genre, i) => {\r\n              return (\r\n                <p className=\"genre\" key={i}>\r\n                  {genre}\r\n                </p>\r\n              );\r\n            })}\r\n        </div>\r\n        <div>\r\n          <p><span>Prouction Date:</span> 2019</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    </Link>\r\n  )\r\n}\r\nexport default MovieCard;","import React from 'react';\r\nimport MovieCard from '../MovieCard/MovieCard';\r\nimport './MovieGrid.css';\r\n\r\nfunction MovieGrid({movies,loading}) {\r\n  return (\r\n    <div className=\"movie-grid\">\r\n     {movies.map(movie => <MovieCard key={movie.id} movie={movie} loading={loading}/>)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MovieGrid;","import React from \"react\";\r\nimport './PageNumbers.css';\r\n\r\nconst PageNumbers = ({ pageNumbers, handleClick }) => {\r\n  return (\r\n    <div className=\"btn-section\">\r\n      {pageNumbers.map(number => {\r\n        return (\r\n          <button className=\"btnlist\" key={number} id={number} onClick={handleClick}>\r\n            {number}\r\n          </button>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PageNumbers;\r\n","import React from 'react';\r\n\r\nimport PageNumbers from \"../PageNumbers/PageNumbers\";\r\n\r\nconst Pagination = ({ data, moviesPerPage, handleClick }) => {\r\n  const pageNumbers = [];\r\n  for (let i = 1; i <= Math.ceil(data.length / moviesPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n  return (\r\n    <PageNumbers pageNumbers={pageNumbers} handleClick={handleClick} />\r\n  );\r\n};\r\n\r\n\r\nexport default Pagination;","import React, { useState, useEffect } from 'react';\r\nimport MovieGrid from '../../Components/MovieGrid/MovieGrid';\r\nimport Pagination from '../../Components/Pagination/Pagination';\r\n\r\nfunction Home({ data, loading, moviesPerPage, currentData, handleClick}) {\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <MovieGrid movies={currentData} loading={loading} />\r\n      <Pagination\r\n        handleClick={handleClick}\r\n        moviesPerPage={moviesPerPage}\r\n        data={data}\r\n      />\r\n    </div>\r\n  )\r\n\r\n}\r\nexport default Home;","import React, { useState, useEffect } from 'react';\nimport Navbar from './Components/Navbar/Navbar';\nimport MoviePage from './Pages/viewMoviePage/MoviePage';\nimport SearchPage from './Pages/SearchPage/SearchPage';\nimport Home from './Pages/Home/Home';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport './App.css';\nfunction App() {\n  const [data, setData] = useState([]);\n\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const moviesPerPage = 20;\n  const [err, setErr] = useState('');\n  useEffect(() => {\n    fetch(\"https://api.tvmaze.com/shows\")\n      .then(response => response.json())\n      .then(data => {\n        setData(data)\n        setLoading(false);\n      })\n      .catch(error => {\n        setErr(error);\n      });\n  })\n\n  function handleClick(event) {\n    setCurrentPage(Number(event.target.id));\n    window.scrollTo(0, 0);\n  }\n  // Logic for displaying current poster\n  const indexOfLastMovie = currentPage * moviesPerPage;\n  const indexOfFirstMovie = indexOfLastMovie - moviesPerPage;\n  const currentData = data.slice(indexOfFirstMovie, indexOfLastMovie);\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar\n        />\n        <Switch>\n          <Route\n            path=\"/\"\n            exact\n            render={props => (\n              <Home\n                {...props}\n                data={data}\n                loading={loading}\n                moviesPerPage={moviesPerPage}\n                currentData={currentData}\n                handleClick={handleClick}\n              />\n            )}\n          />\n          <Route\n            path=\"/moviepage/:id/:moviename\"\n            component={MoviePage} />\n          <Route\n            path=\"/search/:query\"\n            component={SearchPage}\n          />\n        </Switch >\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(< App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}